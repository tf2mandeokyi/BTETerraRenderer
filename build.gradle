import java.util.regex.Pattern

buildscript {
    repositories {
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            name = 'Sponge Mixin'
            url = 'https://repo.spongepowered.org/maven'
        }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath ('net.minecraftforge.gradle:ForgeGradle:6.0.+') { changing = true }
		classpath 'com.github.johnrengelman:shadow:8.1.1'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

subprojects { p ->

    //noinspection GroovyUnusedAssignment
    def isCoreSubProject = p == project(':core')
    def isForgeSubProject = project.name.startsWith('forge')
    def isFabricSubProject = project.name.startsWith('fabric')

    // Match version
    def mcVersionPattern = Pattern.compile('[a-zA-Z]+(\\d+)\\.(\\d+)(\\.(\\d+))?')
    def mcVersionMatcher = mcVersionPattern.matcher(project.name)
    def mcVersionMiddle
    while(mcVersionMatcher.find()) {
        mcVersionMiddle = Integer.parseInt(mcVersionMatcher.group(2))
    }

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        shadowDep
        compileAndTestOnly

        implementation.extendsFrom shadowDep
        compileOnly.extendsFrom compileAndTestOnly
        testImplementation.extendsFrom compileAndTestOnly
    }

    dependencies {
        // We should use shadowDep(group: ..., name: ..., version: ...) instead of shadowDep('group:name:version')
        // since fabric's "include" configuration doesn't allow us to do that
        // ps: fabric ruined it all
        shadowDep(group: 'org.osgeo', name: 'proj4j', version: '0.1.0')
        shadowDep(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.14.2')
        shadowDep(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.2')
        shadowDep(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.16.0')
        shadowDep(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.14.2')
        shadowDep(group: 'de.javagl', name: 'jgltf-impl-v2', version: '2.0.3')
        shadowDep(group: 'de.javagl', name: 'jgltf-model', version: '2.0.3')
        shadowDep(group: 'net.daporkchop.lib', name: 'common', version: '0.5.7-SNAPSHOT') { exclude group: 'io.netty' }
        shadowDep(group: 'net.daporkchop.lib', name: 'binary', version: '0.5.7-SNAPSHOT') { exclude group: 'io.netty' }
        shadowDep(group: 'net.daporkchop.lib', name: 'unsafe', version: '0.5.7-SNAPSHOT')
        shadowDep(group: 'org.yaml', name: 'snakeyaml', version: '1.33')
        if(p != project(':forge1.12.2')) {
            shadowDep(group: 'lzma', name: 'lzma', version: '0.0.1')
        }
        if(isFabricSubProject && mcVersionMiddle >= 19) {
            shadowDep(group: 'io.netty', name: 'netty-codec-http', version: '4.1.9.Final')
            shadowDep(group: 'io.netty', name: 'netty-codec-http2', version: '4.1.9.Final')
        }

        if(isForgeSubProject || isFabricSubProject) {
            shadowDep project(':core')
        }

        compileOnly 'org.apache.logging.log4j:log4j-core:2.20.0'
        compileAndTestOnly 'commons-codec:commons-codec:1.16.0' // T++
        compileAndTestOnly 'com.google.guava:guava:31.1-jre' // T++
        compileAndTestOnly 'io.netty:netty-all:4.1.9.Final' // T++
        compileAndTestOnly 'lzma:lzma:0.0.1' // T++

        compileOnly 'org.projectlombok:lombok:1.18.26'
        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        if(isForgeSubProject) {
            annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
            testImplementation 'org.spongepowered:lwts:1.0.0'
            testImplementation 'org.spongepowered:mixin:0.8.5'
            testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
        }

        testImplementation 'junit:junit:4.13.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testImplementation 'org.apache.logging.log4j:log4j-core:2.20.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        testRuntimeOnly 'junit:junit:4.13.2'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        def resourceTargets = [
                'mcmod.info', // Forge <= 1.12.2
                'META-INF/mods.toml', // Forge >= 1.13
                'fabric.mod.json' // Fabric
        ]
        def intoTargets = [ "$buildDir/resources/main/" ]

        def replaceProperties = [
                // Version properties
                version:        rootProject.mod_version,
                mcversion:      project.minecraftVersion,
                // Mod config file properties
                authors:        rootProject.mod_authors,
                displayName:    rootProject.mod_displayName,
                description:    rootProject.mod_description,
                url:            rootProject.mod_url,
                sourceUrl:      rootProject.mod_sourceUrl,
                discordUrl:     rootProject.mod_discordUrl,
                credits:        rootProject.mod_credits,
                license:        rootProject.mod_license
        ]

        inputs.properties replaceProperties
        filesMatching(resourceTargets) {
            expand replaceProperties
        }
        intoTargets.each { target ->
            if(!file(target).exists()) return
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }

    // Since we're going to do jar-in-jar for fabric,
    // we don't also need to "relocate" dependencies on there.
    // only forge needs the relocations
    if(isForgeSubProject) {
        shadowJar {
            configurations = [project.configurations.shadowDep]

            def librariesLocation = "${project.mod_group}.${project.mod_id}.dep"
            relocate 'com.fasterxml.jackson', "${librariesLocation}.jackson"
            relocate 'de.javagl.jgltf', "${librariesLocation}.jgltf"
            relocate 'net.daporkchop.lib', "${librariesLocation}.porklib"
            relocate 'org.osgeo.proj4j', "${librariesLocation}.proj4j"
            relocate 'org.yaml.snakeyaml', "${librariesLocation}.snakeyaml"

            archiveClassifier.set(null)
            // Java 8 bug: Minecraft will ignore the mod file if 'module-info.class' is included
            exclude '**/module-info.class'
        }
        build.dependsOn shadowJar
    }
}

allprojects { p ->

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    version = "${rootProject.mod_version}-${project.name}" // ex: 1.03-forge1.12.2
    group = rootProject.mod_group
    archivesBaseName = rootProject.mod_id

    compileJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()

        // lzma
        maven { url "https://repo.spongepowered.org/maven/" }

        // For leveldb
        maven { url "https://maven.daporkchop.net/" }
        maven { url "https://repo.opencollab.dev/snapshot/" }

        // Jitpack; For cubicchunks, cubicworldgen, terraplusplus
        maven { url "https://jitpack.io/" }

        // Elytradev; For jankson
        maven { url "https://repo.elytradev.com/" }
    }

    if(p != project(':forge1.12.2') && p != project(':core')) {
        tasks.withType(JavaCompile).configureEach {
            it.options.release.set 17
        }

        java {
            toolchain.languageVersion.set(JavaLanguageVersion.of(17))
            sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
        }
    }
    else {
        java {
            sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    tasks.register('printJavaVersion') {
        println("Java version set to $sourceCompatibility for $p")
    }
    build.finalizedBy printJavaVersion
}